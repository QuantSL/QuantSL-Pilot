var documenterSearchIndex = {"docs":
[{"location":"API/InternalAPI/#Internal-API","page":"Internal API","title":"Internal API","text":"","category":"section"},{"location":"API/InternalAPI/#_generate_indices_from_SYMBOLE","page":"Internal API","title":"_generate_indices_from_SYMBOLE","text":"","category":"section"},{"location":"API/InternalAPI/","page":"Internal API","title":"Internal API","text":"Samples the operator SYMBOL to find which indices appear within its definition. Example:","category":"page"},{"location":"API/InternalAPI/","page":"Internal API","title":"Internal API","text":"_generate_indices_from_H(; parameters::Dict)","category":"page"},{"location":"API/InternalAPI/","page":"Internal API","title":"Internal API","text":"Samples all indices that appear in H and operators H depends upon. parameters has to contain every parameter that was defined up to the definition of H.","category":"page"},{"location":"API/InternalAPI/#_generate_indices","page":"Internal API","title":"_generate_indices","text":"","category":"section"},{"location":"API/InternalAPI/","page":"Internal API","title":"Internal API","text":"Samples all indices in every operator occuring in the qobj file.","category":"page"},{"location":"API/InternalAPI/","page":"Internal API","title":"Internal API","text":"_generate_indices(; parameters::Dict)","category":"page"},{"location":"API/InternalAPI/","page":"Internal API","title":"Internal API","text":"parameters has to contain every parameter specified in the qobj file.","category":"page"},{"location":"API/InternalAPI/#_generate_SYMBOLE","page":"Internal API","title":"_generate_SYMBOLE","text":"","category":"section"},{"location":"API/InternalAPI/","page":"Internal API","title":"Internal API","text":"General interface:","category":"page"},{"location":"API/InternalAPI/","page":"Internal API","title":"Internal API","text":"_generate_SYMBOLE(; basis, indexDict, operators, parameters::Dict)","category":"page"},{"location":"API/InternalAPI/","page":"Internal API","title":"Internal API","text":"basis denotes the composite basis for the total system, indexDict maps each qobj index onto an integer index (like indexDict = Dict( (:α, 1) => 1 ) ), operators specify the definition of the elementary operators and parameters has to contain every parameter that was defined up to the definition of SYMBOLE. See also generate_SYMBOLE","category":"page"},{"location":"API/ExternalAPI/#External-API","page":"External API","title":"External API","text":"","category":"section"},{"location":"API/ExternalAPI/#generate_SYMBOLE","page":"External API","title":"generate_SYMBOLE","text":"","category":"section"},{"location":"API/ExternalAPI/","page":"External API","title":"External API","text":"Examples:","category":"page"},{"location":"API/ExternalAPI/","page":"External API","title":"External API","text":"generate_H(; parameters::Dict)\nGenerates the operator H according to the definition provided in the qobj file: H = ....\ngenerate_H_int(; parameters::Dict)\nGenerates the operator H_int according to the definition provided in the qobj file: H_{int} = ....\ngenerate_n(i; parameters::Dict)\nGenerates the operator n with index i according to the definition provided in the qobj file: either n_i = ... or n_[i] = ....","category":"page"},{"location":"API/ExternalAPI/","page":"External API","title":"External API","text":"parameters has to contain every parameter that was defined up to the definition of SYMBOLE.","category":"page"},{"location":"API/ExternalAPI/#OperatorContainer","page":"External API","title":"OperatorContainer","text":"","category":"section"},{"location":"API/ExternalAPI/","page":"External API","title":"External API","text":"Container that stores every operator defined in the qobj file. Example","category":"page"},{"location":"API/ExternalAPI/","page":"External API","title":"External API","text":"struct OperatorContainer\n  H\n  H_{int}\n  n\nend","category":"page"},{"location":"API/ExternalAPI/","page":"External API","title":"External API","text":"is generated by a qobj file containing the definitions for H, H_{int} and n.","category":"page"},{"location":"API/ExternalAPI/#generateSystem","page":"External API","title":"generateSystem","text":"","category":"section"},{"location":"API/ExternalAPI/","page":"External API","title":"External API","text":"generateSystem(; parameters::Dict)","category":"page"},{"location":"API/ExternalAPI/","page":"External API","title":"External API","text":"Generates every available operator and stores them in an `OperatorContainer:","category":"page"},{"location":"API/ExternalAPI/","page":"External API","title":"External API","text":"operators = generateSystem(...)\nH  = operators.H\nn1 = operators.n(1)","category":"page"},{"location":"API/ExternalAPI/","page":"External API","title":"External API","text":"for a qobj file containing","category":"page"},{"location":"API/ExternalAPI/","page":"External API","title":"External API","text":"H   = ...\nn_i = ...","category":"page"},{"location":"API/ExternalAPI/","page":"External API","title":"External API","text":"parameters has to contain every parameter specified in the qobj file.","category":"page"},{"location":"#Generating-code-for-QuantumOptics.jl","page":"Generating code for QuantumOptics.jl","title":"Generating code for QuantumOptics.jl","text":"","category":"section"},{"location":"","page":"Generating code for QuantumOptics.jl","title":"Generating code for QuantumOptics.jl","text":"This module parses the quantum specific language (QSL) and creates numerical code for the Julia library QuantumOptics.jl.","category":"page"},{"location":"","page":"Generating code for QuantumOptics.jl","title":"Generating code for QuantumOptics.jl","text":"For details refer to Example or the Internal API.","category":"page"},{"location":"example/#Example","page":"Example","title":"Example","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"The QSL file","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"parameter Ω_{Ryd}, Ω, U_{int}, N\nsubsystem Ryd\n\nn_{Ryd} = σ⁺_[Ryd] * σ⁻_[Ryd]\nH_{Ryd} = Ω_{Ryd} * σx_[Ryd]\n\nH_{Rabi} = Ω * sum_[i]^N( σx_i )\n\nn_i = σ⁺_i * σ⁻_i\nH_{int}  = U_{int} * n_{Ryd} * sum_[i]^N( n_i )\n\nH = H_{Ryd} + H_{Rabi} + H_{int}","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"describes a Rydberg atom that undergoes Rabi oscillations with frequency Ω_Ryd and a chain of N non-interacting atoms with Rabi frequency Ω, together with a density-density interaction with strength U_int.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"The generated QuantumOptics.jl code will among other things provide the generateSystem function which generates a function or QuantumOptics.jl operator for each specified operator above:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"parameters = Dict(\n  :Ω_Ryd => 1.0,\n  :Ω     => 0.1,\n  :U_int => 3.0,\n  :N => 4\n)\n\noperators = generateSystem(parameters = parameters)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Here operators provides easy access to all operators above, for example operators.H accesses the Hamiltonian or operators.n(1) is the excitation operator for the first atom in the chain. Alternatively one can generate each element individually:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"H_int = generate_H_int(parameters = parameters)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Notice the absence of curly brackets on the Julia side.","category":"page"}]
}
